/*
*Copyright (c) 2019-2021, Alibaba Group Holding Limited;
*Licensed under the Apache License, Version 2.0 (the "License");
*you may not use this file except in compliance with the License.
*You may obtain a copy of the License at

*   http://www.apache.org/licenses/LICENSE-2.0

*Unless required by applicable law or agreed to in writing, software
*distributed under the License is distributed on an "AS IS" BASIS,
*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*See the License for the specific language governing permissions and
*limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: ./business/domain/i_minor_version_query.go

// Package mockn is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/ApsaraDB/PolarDB-Stack-Common/business/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockIMinorVersionQuery is a mock of IMinorVersionQuery interface.
type MockIMinorVersionQuery struct {
	ctrl     *gomock.Controller
	recorder *MockIMinorVersionQueryMockRecorder
}

// MockIMinorVersionQueryMockRecorder is the mock recorder for MockIMinorVersionQuery.
type MockIMinorVersionQueryMockRecorder struct {
	mock *MockIMinorVersionQuery
}

// NewMockIMinorVersionQuery creates a new mock instance.
func NewMockIMinorVersionQuery(ctrl *gomock.Controller) *MockIMinorVersionQuery {
	mock := &MockIMinorVersionQuery{ctrl: ctrl}
	mock.recorder = &MockIMinorVersionQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMinorVersionQuery) EXPECT() *MockIMinorVersionQueryMockRecorder {
	return m.recorder
}

// GetLatestMinorVersion mocks base method.
func (m *MockIMinorVersionQuery) GetLatestMinorVersion(engineType domain.EngineType) (*domain.MinorVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestMinorVersion", engineType)
	ret0, _ := ret[0].(*domain.MinorVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestMinorVersion indicates an expected call of GetLatestMinorVersion.
func (mr *MockIMinorVersionQueryMockRecorder) GetLatestMinorVersion(engineType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestMinorVersion", reflect.TypeOf((*MockIMinorVersionQuery)(nil).GetLatestMinorVersion), engineType)
}

// GetMinorVersion mocks base method.
func (m *MockIMinorVersionQuery) GetMinorVersion(engineType domain.EngineType, versionName string) (*domain.MinorVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinorVersion", engineType, versionName)
	ret0, _ := ret[0].(*domain.MinorVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinorVersion indicates an expected call of GetMinorVersion.
func (mr *MockIMinorVersionQueryMockRecorder) GetMinorVersion(engineType, versionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinorVersion", reflect.TypeOf((*MockIMinorVersionQuery)(nil).GetMinorVersion), engineType, versionName)
}

// GetMinorVersions mocks base method.
func (m *MockIMinorVersionQuery) GetMinorVersions(engineType domain.EngineType) (string, []*domain.MinorVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinorVersions", engineType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]*domain.MinorVersion)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMinorVersions indicates an expected call of GetMinorVersions.
func (mr *MockIMinorVersionQueryMockRecorder) GetMinorVersions(engineType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinorVersions", reflect.TypeOf((*MockIMinorVersionQuery)(nil).GetMinorVersions), engineType)
}
